/*
My API

This is the API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
)

// checks if the ApiDoEvalPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiDoEvalPost200Response{}

// ApiDoEvalPost200Response struct for ApiDoEvalPost200Response
type ApiDoEvalPost200Response struct {
	StringValue *string `json:"string_value,omitempty"`
	JsonValue map[string]interface{} `json:"json_value"`
}

type _ApiDoEvalPost200Response ApiDoEvalPost200Response

// NewApiDoEvalPost200Response instantiates a new ApiDoEvalPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiDoEvalPost200Response(jsonValue map[string]interface{}) *ApiDoEvalPost200Response {
	this := ApiDoEvalPost200Response{}
	this.JsonValue = jsonValue
	return &this
}

// NewApiDoEvalPost200ResponseWithDefaults instantiates a new ApiDoEvalPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiDoEvalPost200ResponseWithDefaults() *ApiDoEvalPost200Response {
	this := ApiDoEvalPost200Response{}
	return &this
}

// GetStringValue returns the StringValue field value if set, zero value otherwise.
func (o *ApiDoEvalPost200Response) GetStringValue() string {
	if o == nil || IsNil(o.StringValue) {
		var ret string
		return ret
	}
	return *o.StringValue
}

// GetStringValueOk returns a tuple with the StringValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDoEvalPost200Response) GetStringValueOk() (*string, bool) {
	if o == nil || IsNil(o.StringValue) {
		return nil, false
	}
	return o.StringValue, true
}

// HasStringValue returns a boolean if a field has been set.
func (o *ApiDoEvalPost200Response) HasStringValue() bool {
	if o != nil && !IsNil(o.StringValue) {
		return true
	}

	return false
}

// SetStringValue gets a reference to the given string and assigns it to the StringValue field.
func (o *ApiDoEvalPost200Response) SetStringValue(v string) {
	o.StringValue = &v
}

// GetJsonValue returns the JsonValue field value
func (o *ApiDoEvalPost200Response) GetJsonValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.JsonValue
}

// GetJsonValueOk returns a tuple with the JsonValue field value
// and a boolean to check if the value has been set.
func (o *ApiDoEvalPost200Response) GetJsonValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.JsonValue, true
}

// SetJsonValue sets field value
func (o *ApiDoEvalPost200Response) SetJsonValue(v map[string]interface{}) {
	o.JsonValue = v
}

func (o ApiDoEvalPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiDoEvalPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StringValue) {
		toSerialize["string_value"] = o.StringValue
	}
	toSerialize["json_value"] = o.JsonValue
	return toSerialize, nil
}

func (o *ApiDoEvalPost200Response) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"json_value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiDoEvalPost200Response := _ApiDoEvalPost200Response{}

	err = json.Unmarshal(bytes, &varApiDoEvalPost200Response)

	if err != nil {
		return err
	}

	*o = ApiDoEvalPost200Response(varApiDoEvalPost200Response)

	return err
}

type NullableApiDoEvalPost200Response struct {
	value *ApiDoEvalPost200Response
	isSet bool
}

func (v NullableApiDoEvalPost200Response) Get() *ApiDoEvalPost200Response {
	return v.value
}

func (v *NullableApiDoEvalPost200Response) Set(val *ApiDoEvalPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiDoEvalPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiDoEvalPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiDoEvalPost200Response(val *ApiDoEvalPost200Response) *NullableApiDoEvalPost200Response {
	return &NullableApiDoEvalPost200Response{value: val, isSet: true}
}

func (v NullableApiDoEvalPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiDoEvalPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


