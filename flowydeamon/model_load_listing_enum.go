/*
My API

This is the API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
)

// LoadListingEnum the model 'LoadListingEnum'
type LoadListingEnum string

// List of LoadListingEnum
const (
	NO_LISTING LoadListingEnum = "no_listing"
	SHALLOW_LISTING LoadListingEnum = "shallow_listing"
	DEEP_LISTING LoadListingEnum = "deep_listing"
)

// All allowed values of LoadListingEnum enum
var AllowedLoadListingEnumEnumValues = []LoadListingEnum{
	"no_listing",
	"shallow_listing",
	"deep_listing",
}

func (v *LoadListingEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoadListingEnum(value)
	for _, existing := range AllowedLoadListingEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoadListingEnum", value)
}

// NewLoadListingEnumFromValue returns a pointer to a valid LoadListingEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoadListingEnumFromValue(v string) (*LoadListingEnum, error) {
	ev := LoadListingEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoadListingEnum: valid values are %v", v, AllowedLoadListingEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoadListingEnum) IsValid() bool {
	for _, existing := range AllowedLoadListingEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoadListingEnum value
func (v LoadListingEnum) Ptr() *LoadListingEnum {
	return &v
}

type NullableLoadListingEnum struct {
	value *LoadListingEnum
	isSet bool
}

func (v NullableLoadListingEnum) Get() *LoadListingEnum {
	return v.value
}

func (v *NullableLoadListingEnum) Set(val *LoadListingEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadListingEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadListingEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadListingEnum(val *LoadListingEnum) *NullableLoadListingEnum {
	return &NullableLoadListingEnum{value: val, isSet: true}
}

func (v NullableLoadListingEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadListingEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

