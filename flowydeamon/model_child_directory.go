/*
My API

This is the API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
)

// checks if the ChildDirectory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChildDirectory{}

// ChildDirectory struct for ChildDirectory
type ChildDirectory struct {
	Class string `json:"class"`
	Location *string `json:"location,omitempty"`
	Path *string `json:"path,omitempty"`
	Basename *string `json:"basename,omitempty"`
	Dirname *string `json:"dirname,omitempty"`
	Writable *bool `json:"writable,omitempty"`
}

type _ChildDirectory ChildDirectory

// NewChildDirectory instantiates a new ChildDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChildDirectory(class string) *ChildDirectory {
	this := ChildDirectory{}
	this.Class = class
	return &this
}

// NewChildDirectoryWithDefaults instantiates a new ChildDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChildDirectoryWithDefaults() *ChildDirectory {
	this := ChildDirectory{}
	return &this
}

// GetClass returns the Class field value
func (o *ChildDirectory) GetClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *ChildDirectory) GetClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *ChildDirectory) SetClass(v string) {
	o.Class = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ChildDirectory) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildDirectory) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ChildDirectory) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ChildDirectory) SetLocation(v string) {
	o.Location = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ChildDirectory) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildDirectory) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ChildDirectory) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ChildDirectory) SetPath(v string) {
	o.Path = &v
}

// GetBasename returns the Basename field value if set, zero value otherwise.
func (o *ChildDirectory) GetBasename() string {
	if o == nil || IsNil(o.Basename) {
		var ret string
		return ret
	}
	return *o.Basename
}

// GetBasenameOk returns a tuple with the Basename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildDirectory) GetBasenameOk() (*string, bool) {
	if o == nil || IsNil(o.Basename) {
		return nil, false
	}
	return o.Basename, true
}

// HasBasename returns a boolean if a field has been set.
func (o *ChildDirectory) HasBasename() bool {
	if o != nil && !IsNil(o.Basename) {
		return true
	}

	return false
}

// SetBasename gets a reference to the given string and assigns it to the Basename field.
func (o *ChildDirectory) SetBasename(v string) {
	o.Basename = &v
}

// GetDirname returns the Dirname field value if set, zero value otherwise.
func (o *ChildDirectory) GetDirname() string {
	if o == nil || IsNil(o.Dirname) {
		var ret string
		return ret
	}
	return *o.Dirname
}

// GetDirnameOk returns a tuple with the Dirname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildDirectory) GetDirnameOk() (*string, bool) {
	if o == nil || IsNil(o.Dirname) {
		return nil, false
	}
	return o.Dirname, true
}

// HasDirname returns a boolean if a field has been set.
func (o *ChildDirectory) HasDirname() bool {
	if o != nil && !IsNil(o.Dirname) {
		return true
	}

	return false
}

// SetDirname gets a reference to the given string and assigns it to the Dirname field.
func (o *ChildDirectory) SetDirname(v string) {
	o.Dirname = &v
}

// GetWritable returns the Writable field value if set, zero value otherwise.
func (o *ChildDirectory) GetWritable() bool {
	if o == nil || IsNil(o.Writable) {
		var ret bool
		return ret
	}
	return *o.Writable
}

// GetWritableOk returns a tuple with the Writable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildDirectory) GetWritableOk() (*bool, bool) {
	if o == nil || IsNil(o.Writable) {
		return nil, false
	}
	return o.Writable, true
}

// HasWritable returns a boolean if a field has been set.
func (o *ChildDirectory) HasWritable() bool {
	if o != nil && !IsNil(o.Writable) {
		return true
	}

	return false
}

// SetWritable gets a reference to the given bool and assigns it to the Writable field.
func (o *ChildDirectory) SetWritable(v bool) {
	o.Writable = &v
}

func (o ChildDirectory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChildDirectory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["class"] = o.Class
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Basename) {
		toSerialize["basename"] = o.Basename
	}
	if !IsNil(o.Dirname) {
		toSerialize["dirname"] = o.Dirname
	}
	if !IsNil(o.Writable) {
		toSerialize["writable"] = o.Writable
	}
	return toSerialize, nil
}

func (o *ChildDirectory) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"class",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChildDirectory := _ChildDirectory{}

	err = json.Unmarshal(bytes, &varChildDirectory)

	if err != nil {
		return err
	}

	*o = ChildDirectory(varChildDirectory)

	return err
}

type NullableChildDirectory struct {
	value *ChildDirectory
	isSet bool
}

func (v NullableChildDirectory) Get() *ChildDirectory {
	return v.value
}

func (v *NullableChildDirectory) Set(val *ChildDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableChildDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableChildDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChildDirectory(val *ChildDirectory) *NullableChildDirectory {
	return &NullableChildDirectory{value: val, isSet: true}
}

func (v NullableChildDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChildDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


