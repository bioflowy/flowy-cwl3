/*
My API

This is the API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
)

// checks if the File type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &File{}

// File struct for File
type File struct {
	Class string `json:"class"`
	Location *string `json:"location,omitempty"`
	Path *string `json:"path,omitempty"`
	Basename *string `json:"basename,omitempty"`
	Dirname *string `json:"dirname,omitempty"`
	Nameroot *string `json:"nameroot,omitempty"`
	Nameext *string `json:"nameext,omitempty"`
	Checksum *string `json:"checksum,omitempty"`
	Size *float32 `json:"size,omitempty"`
	Format *string `json:"format,omitempty"`
	Contents *string `json:"contents,omitempty"`
	Writable *bool `json:"writable,omitempty"`
	SecondaryFiles []FileAllOfSecondaryFilesInner `json:"secondaryFiles,omitempty"`
}

type _File File

// NewFile instantiates a new File object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFile(class string) *File {
	this := File{}
	this.Class = class
	return &this
}

// NewFileWithDefaults instantiates a new File object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileWithDefaults() *File {
	this := File{}
	return &this
}

// GetClass returns the Class field value
func (o *File) GetClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *File) GetClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *File) SetClass(v string) {
	o.Class = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *File) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *File) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *File) SetLocation(v string) {
	o.Location = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *File) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *File) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *File) SetPath(v string) {
	o.Path = &v
}

// GetBasename returns the Basename field value if set, zero value otherwise.
func (o *File) GetBasename() string {
	if o == nil || IsNil(o.Basename) {
		var ret string
		return ret
	}
	return *o.Basename
}

// GetBasenameOk returns a tuple with the Basename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetBasenameOk() (*string, bool) {
	if o == nil || IsNil(o.Basename) {
		return nil, false
	}
	return o.Basename, true
}

// HasBasename returns a boolean if a field has been set.
func (o *File) HasBasename() bool {
	if o != nil && !IsNil(o.Basename) {
		return true
	}

	return false
}

// SetBasename gets a reference to the given string and assigns it to the Basename field.
func (o *File) SetBasename(v string) {
	o.Basename = &v
}

// GetDirname returns the Dirname field value if set, zero value otherwise.
func (o *File) GetDirname() string {
	if o == nil || IsNil(o.Dirname) {
		var ret string
		return ret
	}
	return *o.Dirname
}

// GetDirnameOk returns a tuple with the Dirname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetDirnameOk() (*string, bool) {
	if o == nil || IsNil(o.Dirname) {
		return nil, false
	}
	return o.Dirname, true
}

// HasDirname returns a boolean if a field has been set.
func (o *File) HasDirname() bool {
	if o != nil && !IsNil(o.Dirname) {
		return true
	}

	return false
}

// SetDirname gets a reference to the given string and assigns it to the Dirname field.
func (o *File) SetDirname(v string) {
	o.Dirname = &v
}

// GetNameroot returns the Nameroot field value if set, zero value otherwise.
func (o *File) GetNameroot() string {
	if o == nil || IsNil(o.Nameroot) {
		var ret string
		return ret
	}
	return *o.Nameroot
}

// GetNamerootOk returns a tuple with the Nameroot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetNamerootOk() (*string, bool) {
	if o == nil || IsNil(o.Nameroot) {
		return nil, false
	}
	return o.Nameroot, true
}

// HasNameroot returns a boolean if a field has been set.
func (o *File) HasNameroot() bool {
	if o != nil && !IsNil(o.Nameroot) {
		return true
	}

	return false
}

// SetNameroot gets a reference to the given string and assigns it to the Nameroot field.
func (o *File) SetNameroot(v string) {
	o.Nameroot = &v
}

// GetNameext returns the Nameext field value if set, zero value otherwise.
func (o *File) GetNameext() string {
	if o == nil || IsNil(o.Nameext) {
		var ret string
		return ret
	}
	return *o.Nameext
}

// GetNameextOk returns a tuple with the Nameext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetNameextOk() (*string, bool) {
	if o == nil || IsNil(o.Nameext) {
		return nil, false
	}
	return o.Nameext, true
}

// HasNameext returns a boolean if a field has been set.
func (o *File) HasNameext() bool {
	if o != nil && !IsNil(o.Nameext) {
		return true
	}

	return false
}

// SetNameext gets a reference to the given string and assigns it to the Nameext field.
func (o *File) SetNameext(v string) {
	o.Nameext = &v
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *File) GetChecksum() string {
	if o == nil || IsNil(o.Checksum) {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetChecksumOk() (*string, bool) {
	if o == nil || IsNil(o.Checksum) {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *File) HasChecksum() bool {
	if o != nil && !IsNil(o.Checksum) {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *File) SetChecksum(v string) {
	o.Checksum = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *File) GetSize() float32 {
	if o == nil || IsNil(o.Size) {
		var ret float32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *File) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given float32 and assigns it to the Size field.
func (o *File) SetSize(v float32) {
	o.Size = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *File) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *File) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *File) SetFormat(v string) {
	o.Format = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *File) GetContents() string {
	if o == nil || IsNil(o.Contents) {
		var ret string
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetContentsOk() (*string, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *File) HasContents() bool {
	if o != nil && !IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given string and assigns it to the Contents field.
func (o *File) SetContents(v string) {
	o.Contents = &v
}

// GetWritable returns the Writable field value if set, zero value otherwise.
func (o *File) GetWritable() bool {
	if o == nil || IsNil(o.Writable) {
		var ret bool
		return ret
	}
	return *o.Writable
}

// GetWritableOk returns a tuple with the Writable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetWritableOk() (*bool, bool) {
	if o == nil || IsNil(o.Writable) {
		return nil, false
	}
	return o.Writable, true
}

// HasWritable returns a boolean if a field has been set.
func (o *File) HasWritable() bool {
	if o != nil && !IsNil(o.Writable) {
		return true
	}

	return false
}

// SetWritable gets a reference to the given bool and assigns it to the Writable field.
func (o *File) SetWritable(v bool) {
	o.Writable = &v
}

// GetSecondaryFiles returns the SecondaryFiles field value if set, zero value otherwise.
func (o *File) GetSecondaryFiles() []FileAllOfSecondaryFilesInner {
	if o == nil || IsNil(o.SecondaryFiles) {
		var ret []FileAllOfSecondaryFilesInner
		return ret
	}
	return o.SecondaryFiles
}

// GetSecondaryFilesOk returns a tuple with the SecondaryFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetSecondaryFilesOk() ([]FileAllOfSecondaryFilesInner, bool) {
	if o == nil || IsNil(o.SecondaryFiles) {
		return nil, false
	}
	return o.SecondaryFiles, true
}

// HasSecondaryFiles returns a boolean if a field has been set.
func (o *File) HasSecondaryFiles() bool {
	if o != nil && !IsNil(o.SecondaryFiles) {
		return true
	}

	return false
}

// SetSecondaryFiles gets a reference to the given []FileAllOfSecondaryFilesInner and assigns it to the SecondaryFiles field.
func (o *File) SetSecondaryFiles(v []FileAllOfSecondaryFilesInner) {
	o.SecondaryFiles = v
}

func (o File) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o File) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["class"] = o.Class
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Basename) {
		toSerialize["basename"] = o.Basename
	}
	if !IsNil(o.Dirname) {
		toSerialize["dirname"] = o.Dirname
	}
	if !IsNil(o.Nameroot) {
		toSerialize["nameroot"] = o.Nameroot
	}
	if !IsNil(o.Nameext) {
		toSerialize["nameext"] = o.Nameext
	}
	if !IsNil(o.Checksum) {
		toSerialize["checksum"] = o.Checksum
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.Contents) {
		toSerialize["contents"] = o.Contents
	}
	if !IsNil(o.Writable) {
		toSerialize["writable"] = o.Writable
	}
	if !IsNil(o.SecondaryFiles) {
		toSerialize["secondaryFiles"] = o.SecondaryFiles
	}
	return toSerialize, nil
}

func (o *File) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"class",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFile := _File{}

	err = json.Unmarshal(bytes, &varFile)

	if err != nil {
		return err
	}

	*o = File(varFile)

	return err
}

type NullableFile struct {
	value *File
	isSet bool
}

func (v NullableFile) Get() *File {
	return v.value
}

func (v *NullableFile) Set(val *File) {
	v.value = val
	v.isSet = true
}

func (v NullableFile) IsSet() bool {
	return v.isSet
}

func (v *NullableFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFile(val *File) *NullableFile {
	return &NullableFile{value: val, isSet: true}
}

func (v NullableFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


