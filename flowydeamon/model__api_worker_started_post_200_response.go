/*
My API

This is the API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
)

// ApiWorkerStartedPost200Response struct for ApiWorkerStartedPost200Response
type ApiWorkerStartedPost200Response struct {
	NFSConfig *NFSConfig
	S3Config *S3Config
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ApiWorkerStartedPost200Response) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into NFSConfig
	err = json.Unmarshal(data, &dst.NFSConfig);
	if err == nil {
		jsonNFSConfig, _ := json.Marshal(dst.NFSConfig)
		if string(jsonNFSConfig) == "{}" { // empty struct
			dst.NFSConfig = nil
		} else {
			return nil // data stored in dst.NFSConfig, return on the first match
		}
	} else {
		dst.NFSConfig = nil
	}

	// try to unmarshal JSON data into S3Config
	err = json.Unmarshal(data, &dst.S3Config);
	if err == nil {
		jsonS3Config, _ := json.Marshal(dst.S3Config)
		if string(jsonS3Config) == "{}" { // empty struct
			dst.S3Config = nil
		} else {
			return nil // data stored in dst.S3Config, return on the first match
		}
	} else {
		dst.S3Config = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ApiWorkerStartedPost200Response)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ApiWorkerStartedPost200Response) MarshalJSON() ([]byte, error) {
	if src.NFSConfig != nil {
		return json.Marshal(&src.NFSConfig)
	}

	if src.S3Config != nil {
		return json.Marshal(&src.S3Config)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableApiWorkerStartedPost200Response struct {
	value *ApiWorkerStartedPost200Response
	isSet bool
}

func (v NullableApiWorkerStartedPost200Response) Get() *ApiWorkerStartedPost200Response {
	return v.value
}

func (v *NullableApiWorkerStartedPost200Response) Set(val *ApiWorkerStartedPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApiWorkerStartedPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApiWorkerStartedPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiWorkerStartedPost200Response(val *ApiWorkerStartedPost200Response) *NullableApiWorkerStartedPost200Response {
	return &NullableApiWorkerStartedPost200Response{value: val, isSet: true}
}

func (v NullableApiWorkerStartedPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiWorkerStartedPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


